========================
Cassandra Sink Connector
========================

.. image:: CassandraSinkConnector.svg


The Cassandra Sink connector is used to write data to a Cassandra Cluster. This connector works by utilizing the `Batch <http://docs.datastax.com/en/drivers/java/3.0/com/datastax/driver/core/querybuilder/Batch.html>`_ functionality to write all of the records in each poll in a single batch.


.. IMPORTANT::
    This connector can be configured to manage the schema on the Cassandra cluster. When altering an existing table the key is ignored. This is due to the potential issues changing a primary key on an existing table. The key schema is used to generate a primary key for the table when it is newly created. These fields must be in the value schema as well. Data written to the table is always read from the value from Kafka. This connector uses the topic to determine the name of the table to write to. This can be changed on the fly by using a transform to change the topic name.


.. TIP::
    If you encounter error messages like this `Batch for [test.twitter] is of size 127.661KiB, exceeding specified threshold of 50.000KiB by 77.661KiB.` or warning messages like `Batch for [test.twitter] is of size 25.885KiB, exceeding specified threshold of 5.000KiB by 20.885KiB.` Try adjusting the `consumer.max.poll.records` setting in the worker.properties for Kafka Connect.


.. NOTE::
    This connector uses the topic to determine the name of the table to write to. This can be changed on the fly by using a transform like `Regex Router <https://kafka.apache.org/documentation/#connect_transforms>`_ to change the topic name.



-------------
Configuration
-------------

-------
General
-------


^^^^^^^^^^^^^^^^^^
cassandra.keyspace
^^^^^^^^^^^^^^^^^^

The keyspace to write to.

**Importance:** High

**Type:** String



^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
cassandra.keyspace.create.enabled
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Flag to determine if the keyspace should be created if it does not exist.

**Importance:** High

**Type:** Boolean

**Default Value:** true



^^^^^^^^^^^^^^^^^^^^^
cassandra.compression
^^^^^^^^^^^^^^^^^^^^^

Compression algorithm to use when connecting to Cassandra.

**Importance:** Medium

**Type:** String

**Default Value:** NONE

**Validator:** [NONE, SNAPPY, LZ4]



^^^^^^^^^^^^^^^^^^^^^^^^^^^
cassandra.consistency.level
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The requested consistency level to use when writing to Cassandra.

**Importance:** Medium

**Type:** String

**Default Value:** LOCAL_QUORUM

**Validator:** ValidEnum{enum=ConsistencyLevel, allowed=[ANY, ONE, TWO, THREE, QUORUM, ALL, LOCAL_QUORUM, EACH_QUORUM, SERIAL, LOCAL_SERIAL, LOCAL_ONE]}



^^^^^^^^^^^^^^^^^^^^^^^^
cassandra.contact.points
^^^^^^^^^^^^^^^^^^^^^^^^

The hosts to connect to.

**Importance:** Medium

**Type:** List

**Default Value:** [localhost]



^^^^^^^^^^^^^^^^^^^^^^^^^
cassandra.deletes.enabled
^^^^^^^^^^^^^^^^^^^^^^^^^

Flag to determine if the connector should process deletes.

**Importance:** Medium

**Type:** Boolean

**Default Value:** true



^^^^^^^^^^^^^^^^^^
cassandra.password
^^^^^^^^^^^^^^^^^^

The password to connect to Cassandra with.

**Importance:** Medium

**Type:** Password

**Default Value:** [hidden]



^^^^^^^^^^^^^^
cassandra.port
^^^^^^^^^^^^^^

The port the Cassandra hosts are listening on.

**Importance:** Medium

**Type:** Int

**Default Value:** 9042

**Validator:** ValidPort{start=1025, end=65535}



^^^^^^^^^^^^^^^^^^^^^^^^^^
cassandra.security.enabled
^^^^^^^^^^^^^^^^^^^^^^^^^^

Flag to determine if security is enabled.

**Importance:** Medium

**Type:** Boolean

**Default Value:** false



^^^^^^^^^^^^^^^^^^^^^
cassandra.ssl.enabled
^^^^^^^^^^^^^^^^^^^^^

Flag to determine if SSL is enabled when connecting to Cassandra.

**Importance:** Medium

**Type:** Boolean

**Default Value:** false



^^^^^^^^^^^^^^^^^^^^^^
cassandra.ssl.provider
^^^^^^^^^^^^^^^^^^^^^^

The SSL Provider to use when connecting to Cassandra

**Importance:** Medium

**Type:** String

**Default Value:** JDK

**Validator:** ValidEnum{enum=SslProvider, allowed=[JDK, OPENSSL, OPENSSL_REFCNT]}



^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
cassandra.table.create.caching
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Caching setting to use.

**Importance:** Medium

**Type:** String

**Default Value:** NONE

**Validator:** ValidEnum{enum=Caching, allowed=[ALL, KEYS_ONLY, ROWS_ONLY, NONE]}



^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
cassandra.table.create.compression.algorithm
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Compression algorithm to use when the table is created.

**Importance:** Medium

**Type:** String

**Default Value:** NONE

**Validator:** [NONE, SNAPPY, LZ4, DEFLATE]



^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
cassandra.table.create.compression.enabled
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Flag to determine if compression should be used when a table is created. Existing tables are not altered.

**Importance:** Medium

**Type:** Boolean

**Default Value:** true



^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
cassandra.table.manage.enabled
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Flag to determine if the connector should manage the table.

**Importance:** Medium

**Type:** Boolean

**Default Value:** true



^^^^^^^^^^^^^^^^^^
cassandra.username
^^^^^^^^^^^^^^^^^^

The username to connect to Cassandra with.

**Importance:** Medium

**Type:** String

**Default Value:** cassandra



^^^^^^^^^^^^^^^^^^^^
cassandra.write.mode
^^^^^^^^^^^^^^^^^^^^

The type of statement to build when writing to Cassandra.

**Importance:** Medium

**Type:** String

**Default Value:** Insert

**Validator:** ValidEnum{enum=WriteMode, allowed=[Insert, Update]}






--------
Examples
--------

^^^^^^^^^^^
Upsert mode
^^^^^^^^^^^

This example will configure the connector to use upserts when writing data to Cassandra.



Select one of the following configuration methods based on how you have deployed Kafka Connect.
Distributed Mode will the the JSON / REST examples. Standalone mode will use the properties based
example.


**Distributed Mode Json**

.. literalinclude:: CassandraSinkConnector.updatemode.example.json
    :language: JSON


**Standalone Mode Properties**

.. literalinclude:: CassandraSinkConnector.updatemode.example.properties
    :language: properties



^^^^^^^^
Standard
^^^^^^^^

This example will connect to an Apache Cassandra instance without authentication.



Select one of the following configuration methods based on how you have deployed Kafka Connect.
Distributed Mode will the the JSON / REST examples. Standalone mode will use the properties based
example.


**Distributed Mode Json**

.. literalinclude:: CassandraSinkConnector.standard.example.json
    :language: JSON


**Standalone Mode Properties**

.. literalinclude:: CassandraSinkConnector.standard.example.properties
    :language: properties



^^^^^^^^^^^^^^^^^^^^^^
SSL and Authentication
^^^^^^^^^^^^^^^^^^^^^^

This example will connect to an Apache Cassandra instance with SSL and username / password authentication.



Select one of the following configuration methods based on how you have deployed Kafka Connect.
Distributed Mode will the the JSON / REST examples. Standalone mode will use the properties based
example.


**Distributed Mode Json**

.. literalinclude:: CassandraSinkConnector.authenicated.example.json
    :language: JSON


**Standalone Mode Properties**

.. literalinclude:: CassandraSinkConnector.authenicated.example.properties
    :language: properties




