==========
Cloud Solr
==========

.. image:: CloudSolrSinkConnector.svg


This connector is used to connect to `SolrCloud <https://cwiki.apache.org/confluence/display/solr/SolrCloud>`_ using the Zookeeper based configuration.


.. TIP::
    The target collection for this connector is selected by the topic name. `Transformations <https://kafka.apache.org/documentation/#connect_transforms>`_ like the RegexRouter transformation can be used to change the topic name before it is sent to Solr.



-------------
Configuration
-------------

--------------
Authentication
--------------


^^^^^^^^^^^^^
solr.password
^^^^^^^^^^^^^

The password to use for basic authentication.

**Importance:** High

**Type:** Password

**Default Value:** [hidden]



^^^^^^^^^^^^^
solr.username
^^^^^^^^^^^^^

The username to use for basic authentication.

**Importance:** High

**Type:** String



----------
Connection
----------


^^^^^^^^^^^^^^^^^^^^
solr.zookeeper.hosts
^^^^^^^^^^^^^^^^^^^^

Zookeeper hosts that are used to store solr configuration.

**Importance:** High

**Type:** List



^^^^^^^^^^^^^^^^^^^^^
solr.zookeeper.chroot
^^^^^^^^^^^^^^^^^^^^^

Chroot within solr for the zookeeper configuration.

**Importance:** High

**Type:** String



--------
Indexing
--------


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
solr.delete.documents.enabled
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Flag to determine if the connector should delete documents. General practice in Kafka is to treat a record that contains a key with a null value as a delete.

**Importance:** Medium

**Type:** Boolean

**Default Value:** true



^^^^^^^^^^^^^^^^^^
solr.commit.within
^^^^^^^^^^^^^^^^^^

Configures Solr UpdaterRequest for a commit within the requested number of milliseconds. -1 disables the commit within setting and relies on the standard Solr commit setting.

**Importance:** Low

**Type:** Int

**Default Value:** -1






--------
Examples
--------

^^^^^^^^^^^^^^^^^^^^^^
Property based example
^^^^^^^^^^^^^^^^^^^^^^


This configuration is used typically along with `standalone mode
<http://docs.confluent.io/current/connect/concepts.html#standalone-workers>`_.

.. code-block:: properties
    :name: connector.properties
    :emphasize-lines: 4,5

    name=CloudSolrSinkConnector1
    connector.class=com.github.jcustenborder.kafka.connect.solr.CloudSolrSinkConnector
    tasks.max=1
    topics=< Required Configuration >
    solr.zookeeper.hosts=< Required Configuration >




^^^^^^^^^^^^^^^^^^
Rest based example
^^^^^^^^^^^^^^^^^^


This configuration is used typically along with `distributed mode
<http://docs.confluent.io/current/connect/concepts.html#distributed-workers>`_.
Write the following json to `connector.json`, configure all of the required values, and use the command below to
post the configuration to one the distributed connect worker(s). Check here for more information about the
`Kafka Connect REST Interface. <https://docs.confluent.io/current/connect/restapi.html>`_

.. code-block:: json
    :caption: Connect Distributed REST example
    :name: connector.json
    :emphasize-lines: 6,7

    {
      "config" : {
        "name" : "CloudSolrSinkConnector1",
        "connector.class" : "com.github.jcustenborder.kafka.connect.solr.CloudSolrSinkConnector",
        "tasks.max" : "1",
        "topics" : "< Required Configuration >",
        "solr.zookeeper.hosts" : "< Required Configuration >"
      }
    }



Use curl to post the configuration to one of the Kafka Connect Workers. Change `http://localhost:8083/` the the endpoint of
one of your Kafka Connect worker(s).

.. code-block:: bash
    :caption: Create a new connector

    curl -s -X POST -H 'Content-Type: application/json' --data @connector.json http://localhost:8083/connectors


.. code-block:: bash
    :caption: Update an existing connector

    curl -s -X PUT -H 'Content-Type: application/json' --data @connector.json http://localhost:8083/connectors/CloudSolrSinkConnector1/config



