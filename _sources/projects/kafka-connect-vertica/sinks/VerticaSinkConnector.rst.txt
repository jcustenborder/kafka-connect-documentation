====================
VerticaSinkConnector
====================

.. image:: VerticaSinkConnector.svg


The VerticaSinkConnector utilizes the VerticaCopyStream of the JDBC SDK to write data to Vertica.


.. IMPORTANT::
    Because of the licensing restrictions of HPE Vertica the JDBC driver cannot be shipped with this connector. You must separately download the JDBC connector from HPE and place it in the classpath.



-------------
Configuration
-------------


^^^^^^^^^^^^^^^^
vertica.database
^^^^^^^^^^^^^^^^

**Importance:** High

**Type:** String


The database on the Vertica system. This is used to build the JDBC url.

^^^^^^^^^^^^
vertica.host
^^^^^^^^^^^^

**Importance:** High

**Type:** String


The Vertica host to connect to. This is used to build the JDBC url.

^^^^^^^^^^^^^^^^
vertica.password
^^^^^^^^^^^^^^^^

**Importance:** High

**Type:** Password


The password to authenticate to Vertica with.

^^^^^^^^^^^^^^^^
vertica.username
^^^^^^^^^^^^^^^^

**Importance:** High

**Type:** String


The username to authenticate to Vertica with.

^^^^^^^^^^^^^^^^^^^^^^^
stream.builder.cache.ms
^^^^^^^^^^^^^^^^^^^^^^^

**Importance:** High

**Type:** Int

**Default Value:** 300000

**Validator:** [1000,...,2147483647]


The amount of time in milliseconds to cache the stream builder objects that are used to define the table structure.

^^^^^^^^^^^^^^^^^^^^^^^^^
vertica.buffer.size.bytes
^^^^^^^^^^^^^^^^^^^^^^^^^

**Importance:** High

**Type:** Int

**Default Value:** 1048576


The buffer for the input stream that is used by the Vertica Copy Stream.

^^^^^^^^^^^^^^^^^^
vertica.timeout.ms
^^^^^^^^^^^^^^^^^^

**Importance:** High

**Type:** Int

**Default Value:** 60000

**Validator:** [10000,...,2147483647]


The timeout for completing the write to Vertica.

^^^^^^^^^^^^^^^^^^^
vertica.compression
^^^^^^^^^^^^^^^^^^^

**Importance:** Medium

**Type:** String

**Default Value:** UNCOMPRESSED

**Validator:** ValidEnum{enum=VerticaCompressionType, allowed=[UNCOMPRESSED, BZIP, GZIP, LZO]}


The type of compression for the data load.

^^^^^^^^^^^^^^^^^^^
vertica.load.method
^^^^^^^^^^^^^^^^^^^

**Importance:** Medium

**Type:** String

**Default Value:** AUTO

**Validator:** ValidEnum{enum=VerticaLoadMethod, allowed=[AUTO, DIRECT, TRICKLE]}


The method for loading data.

^^^^^^^^^^^^
vertica.port
^^^^^^^^^^^^

**Importance:** Medium

**Type:** Int

**Default Value:** 5433

**Validator:** ValidPort{start=1025, end=65535}


The Vertica port to connect to. This is used to build the JDBC url.

^^^^^^^^^^^^^^^^
expected.records
^^^^^^^^^^^^^^^^

**Importance:** Low

**Type:** Int

**Default Value:** 10000


The expected number of records the connector will process each time.

^^^^^^^^^^^^^^^
expected.topics
^^^^^^^^^^^^^^^

**Importance:** Low

**Type:** Int

**Default Value:** 500


The expected number of topics the connector will process in a poll.

--------
Examples
--------

^^^^^^^^^^^^^^^^^^^^^^
Property based example
^^^^^^^^^^^^^^^^^^^^^^


This configuration is used typically along with `standalone mode
<http://docs.confluent.io/current/connect/concepts.html#standalone-workers>`_.

.. code-block:: properties
    :name: connector.properties
    :emphasize-lines: 4,5,6,7,8

    name=VerticaSinkConnector1
    connector.class=com.github.jcustenborder.kafka.connect.vertica.VerticaSinkConnector
    tasks.max=1
    topics=< Required Configuration >
    vertica.database=< Required Configuration >
    vertica.host=< Required Configuration >
    vertica.password=< Required Configuration >
    vertica.username=< Required Configuration >




^^^^^^^^^^^^^^^^^^
Rest based example
^^^^^^^^^^^^^^^^^^


This configuration is used typically along with `distributed mode
<http://docs.confluent.io/current/connect/concepts.html#distributed-workers>`_.
Write the following json to `connector.json`, configure all of the required values, and use the command below to
post the configuration to one the distributed connect worker(s). Check here for more information about the
`Kafka Connect REST Interface. <https://docs.confluent.io/current/connect/restapi.html>`_

.. code-block:: json
    :name: connector.json
    :emphasize-lines: 6,7,8,9,10

    {
      "config" : {
        "name" : "VerticaSinkConnector1",
        "connector.class" : "com.github.jcustenborder.kafka.connect.vertica.VerticaSinkConnector",
        "tasks.max" : "1",
        "topics" : "< Required Configuration >",
        "vertica.database" : "< Required Configuration >",
        "vertica.host" : "< Required Configuration >",
        "vertica.password" : "< Required Configuration >",
        "vertica.username" : "< Required Configuration >"
      }
    }



Use curl to post the configuration to one of the Kafka Connect Workers. Change `http://localhost:8083/` the the endpoint of
one of your Kafka Connect worker(s).

.. code-block:: bash
    :caption: Create a new connector

    curl -s -X POST -H 'Content-Type: application/json' --data @connector.json http://localhost:8083/connectors


.. code-block:: bash
    :caption: Update an existing connector

    curl -s -X PUT -H 'Content-Type: application/json' --data @connector.json http://localhost:8083/connectors/VerticaSinkConnector1/config


