=================
MqttSinkConnector
=================




-------------
Configuration
-------------

-------
General
-------


^^^^^^^^^^^^^^^
mqtt.server.uri
^^^^^^^^^^^^^^^

List of Mqtt brokers to connect to.

**Importance:** High

**Type:** List



^^^^^^^^^^^^^
mqtt.password
^^^^^^^^^^^^^

Password to connect with.

**Importance:** High

**Type:** Password

**Default Value:** [hidden]



^^^^^^^^^^^^^
mqtt.username
^^^^^^^^^^^^^

Username to connect with.

**Importance:** High

**Type:** String



^^^^^^^^
mqtt.qos
^^^^^^^^

The QOS level to write messages to the Mqtt broker with.

**Importance:** Medium

**Type:** Int

**Default Value:** 0

**Validator:** [0,...,2]



^^^^^^^^^^^^^^^^^^^^^
mqtt.retained.enabled
^^^^^^^^^^^^^^^^^^^^^

Flag to determine if the messages should be retained.

**Importance:** Medium

**Type:** Boolean

**Default Value:** true



^^^^^^^^^^^^^^^^^^^^^^^^^^
mqtt.clean.session.enabled
^^^^^^^^^^^^^^^^^^^^^^^^^^

Sets whether the client and server should remember state across restarts and reconnects.

**Importance:** Low

**Type:** Boolean

**Default Value:** true



^^^^^^^^^^^^^^^^^^^^^^^^^^^^
mqtt.connect.timeout.seconds
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sets the connection timeout value.

**Importance:** Low

**Type:** Int

**Default Value:** 30

**Validator:** [1,...]



^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
mqtt.keepalive.interval.seconds
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sets the "keep alive" interval.

**Importance:** Low

**Type:** Int

**Default Value:** 60

**Validator:** [1,...]






--------
Examples
--------

^^^^^^^^^^^^^^^^^^^^^^
Property based example
^^^^^^^^^^^^^^^^^^^^^^


This configuration is used typically along with `standalone mode
<http://docs.confluent.io/current/connect/concepts.html#standalone-workers>`_.

.. code-block:: properties
    :name: connector.properties
    :emphasize-lines: 4,5

    name=MqttSinkConnector1
    connector.class=io.confluent.connect.mqtt.MqttSinkConnector
    tasks.max=1
    topics=< Required Configuration >
    mqtt.server.uri=< Required Configuration >




^^^^^^^^^^^^^^^^^^
Rest based example
^^^^^^^^^^^^^^^^^^


This configuration is used typically along with `distributed mode
<http://docs.confluent.io/current/connect/concepts.html#distributed-workers>`_.
Write the following json to `connector.json`, configure all of the required values, and use the command below to
post the configuration to one the distributed connect worker(s). Check here for more information about the
`Kafka Connect REST Interface. <https://docs.confluent.io/current/connect/restapi.html>`_

.. code-block:: json
    :caption: Connect Distributed REST example
    :name: connector.json
    :emphasize-lines: 6,7

    {
      "config" : {
        "name" : "MqttSinkConnector1",
        "connector.class" : "io.confluent.connect.mqtt.MqttSinkConnector",
        "tasks.max" : "1",
        "topics" : "< Required Configuration >",
        "mqtt.server.uri" : "< Required Configuration >"
      }
    }



Use curl to post the configuration to one of the Kafka Connect Workers. Change `http://localhost:8083/` the the endpoint of
one of your Kafka Connect worker(s).

.. code-block:: bash
    :caption: Create a new connector

    curl -s -X POST -H 'Content-Type: application/json' --data @connector.json http://localhost:8083/connectors


.. code-block:: bash
    :caption: Update an existing connector

    curl -s -X PUT -H 'Content-Type: application/json' --data @connector.json http://localhost:8083/connectors/MqttSinkConnector1/config



