====================
MsSqlSourceConnector
====================

.. image:: MsSqlSourceConnector.svg


The Microsoft SQL Server connector utilizes `Change Tracking <https://msdn.microsoft.com/en-us/library/bb933875.aspx>`_ to identify changes. There are two ways to read the changes from the source system as they are generated. `Change Data Capture <https://msdn.microsoft.com/en-us/library/cc645937.aspx>`_ is a feature that is only available on SQL Server Enterprise and Developer editions. `Change Tracking <https://msdn.microsoft.com/en-us/library/bb933875.aspx>`_ is a lightweight solution that will efficiently find rows that have changed. If the rows are modified in quick succession all of the changes might not be found. The latest version of the change will be returned.



-------------
Configuration
-------------


^^^^^^^^^^^^^^^^
initial.database
^^^^^^^^^^^^^^^^

**Importance:** High

**Type:** String


The initial database to connect to.

^^^^^^^^
password
^^^^^^^^

**Importance:** High

**Type:** Password


JDBC Password to connect to the database with.

^^^^^^^^^^^
server.name
^^^^^^^^^^^

**Importance:** High

**Type:** String


The server to connect to.

^^^^^^^^^^^
server.port
^^^^^^^^^^^

**Importance:** High

**Type:** Int


The port on the server to connect to.

^^^^^^^^
username
^^^^^^^^

**Importance:** High

**Type:** String


JDBC Username to connect to the database with.

^^^^^^^^^^^^^^^^^^^^^^
schema.key.name.format
^^^^^^^^^^^^^^^^^^^^^^

**Importance:** High

**Type:** String

**Default Value:** ${namespace}.${tableName}Key


Format used to generate the name for the key schema. The following template properties are available for string replacement. `${databaseName}`, `${schemaName}`, `${tableName}`, `${namespace}`

^^^^^^^^^^^^^^^^^^^^^^^
schema.namespace.format
^^^^^^^^^^^^^^^^^^^^^^^

**Importance:** High

**Type:** String

**Default Value:** com.example.data.${databaseName}


The namespace for the schemas generated by the connector. The following template properties are available for string replacement. `${databaseName}`, `${schemaName}`, `${tableName}`, `${namespace}`

^^^^^^^^^^^^^^^^^^^^^^^^
schema.value.name.format
^^^^^^^^^^^^^^^^^^^^^^^^

**Importance:** High

**Type:** String

**Default Value:** ${namespace}.${tableName}Value


Format used to generate the name for the value schema. The following template properties are available for string replacement. `${databaseName}`, `${schemaName}`, `${tableName}`, `${namespace}`

^^^^^^^^^^^^^^^^^^
topicFormat.format
^^^^^^^^^^^^^^^^^^

**Importance:** High

**Type:** String

**Default Value:** ${databaseName}.${tableName}


The topicFormat to write the data to.

^^^^^^^^^^^^^^^^^^^^^^
change.tracking.tables
^^^^^^^^^^^^^^^^^^^^^^

**Importance:** Medium

**Type:** List

**Default Value:** []


The tables in the source database to monitor for changes. If no tables are specified the `[sys].[change_tracking_tables]` view is queried for all of the available tables with change tracking enabled.

^^^^^^^^^^^^^^^^^^
jdbc.pool.max.idle
^^^^^^^^^^^^^^^^^^

**Importance:** Medium

**Type:** Int

**Default Value:** 10


The maximum number of idle CONNECTIONS in the connection pool.

^^^^^^^^^^^^^^^^^^^
jdbc.pool.max.total
^^^^^^^^^^^^^^^^^^^

**Importance:** Medium

**Type:** Int

**Default Value:** 30


The maximum number of CONNECTIONS for the connection pool to open. If a number greater than this value is requested, the caller will block waiting for a connection to be returned.

^^^^^^^^^^^^^^^^^^
jdbc.pool.min.idle
^^^^^^^^^^^^^^^^^^

**Importance:** Medium

**Type:** Int

**Default Value:** 3


The minimum number of idle CONNECTIONS in the connection pool.

^^^^^^^^^^^^^^^
backoff.time.ms
^^^^^^^^^^^^^^^

**Importance:** Low

**Type:** Int

**Default Value:** 1000

**Validator:** [50,...]


The number of milliseconds to wait when no records are returned.

^^^^^^^^^^
batch.size
^^^^^^^^^^

**Importance:** Low

**Type:** Int

**Default Value:** 512

**Validator:** [1,...]


The number of records to return in a batch.

^^^^^^^^^^^^^^^^^^^^^
multi.subnet.failover
^^^^^^^^^^^^^^^^^^^^^

**Importance:** Low

**Type:** Boolean

**Default Value:** false


Use High Availability MultiSubnetFailover (true/false)

^^^^^^^^^^^^^^^
schema.cache.ms
^^^^^^^^^^^^^^^

**Importance:** Low

**Type:** Int

**Default Value:** 300000

**Validator:** [60000,...]


The number of milliseconds to cache schema metadata in memory.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
schema.caseformat.column.name
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Importance:** Low

**Type:** String

**Default Value:** NONE

**Validator:** ValidEnum{enum=CaseFormat, allowed=[LOWER_HYPHEN, LOWER_UNDERSCORE, LOWER_CAMEL, LOWER, UPPER_CAMEL, UPPER_UNDERSCORE, UPPER, NONE]}


This setting is used to control how the column names are cased when the resulting schemas are generated.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
schema.caseformat.database.name
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Importance:** Low

**Type:** String

**Default Value:** NONE

**Validator:** ValidEnum{enum=CaseFormat, allowed=[LOWER_HYPHEN, LOWER_UNDERSCORE, LOWER_CAMEL, LOWER, UPPER_CAMEL, UPPER_UNDERSCORE, UPPER, NONE]}


This setting is used to control how the `${databaseName}` variable is cased when it is passed to the formatters defined in the `schema.namespace.format`, `schema.key.name.format`, `schema.value.name.format`, `topicFormat.format` settings. This allows you to control the naming applied to these properties. For example this can be used to take a database name of `USER_TRACKING` to a more java like case of `userTracking` or all lowercase `usertracking`.

^^^^^^^^^^^^^^^^^^^^^^^
schema.caseformat.input
^^^^^^^^^^^^^^^^^^^^^^^

**Importance:** Low

**Type:** String

**Default Value:** UPPER_UNDERSCORE

**Validator:** ValidEnum{enum=CaseFormat, allowed=[LOWER_HYPHEN, LOWER_UNDERSCORE, LOWER_CAMEL, UPPER_CAMEL, UPPER_UNDERSCORE]}


The naming convention used by the database format. This is used to define the source naming convention used by the other `schema.caseformat.*` properties.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
schema.caseformat.schema.name
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Importance:** Low

**Type:** String

**Default Value:** NONE

**Validator:** ValidEnum{enum=CaseFormat, allowed=[LOWER_HYPHEN, LOWER_UNDERSCORE, LOWER_CAMEL, LOWER, UPPER_CAMEL, UPPER_UNDERSCORE, UPPER, NONE]}


This setting is used to control how the `${schemaName}` variable is cased when it is passed to the formatters defined in the `schema.namespace.format`, `schema.key.name.format`, `schema.value.name.format`, `topicFormat.format` settings. This allows you to control the naming applied to these properties. For example this can be used to take a schema name of `SCOTT` to a more java like case of `Scott` or all lowercase `scott`.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
schema.caseformat.table.name
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Importance:** Low

**Type:** String

**Default Value:** NONE

**Validator:** ValidEnum{enum=CaseFormat, allowed=[LOWER_HYPHEN, LOWER_UNDERSCORE, LOWER_CAMEL, LOWER, UPPER_CAMEL, UPPER_UNDERSCORE, UPPER, NONE]}


This setting is used to control how the `${tableName}` variable is cased when it is passed to the formatters defined in the `schema.namespace.format`, `schema.key.name.format`, `schema.value.name.format`, `topicFormat.format` settings. This allows you to control the naming applied to these properties. For example this can be used to take a table name of `USER_SETTING` to a more java like case of `UserSetting` or all lowercase `usersetting`.

^^^^^^^^^^^^^^^^^^^^^
uncomitted.record.max
^^^^^^^^^^^^^^^^^^^^^

**Importance:** Low

**Type:** Int

**Default Value:** 50000

**Validator:** [100,...]


The maximum number of records to allow in the deque. Once this limit is reached the record deque will block to prevent running out of memory.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
uncomitted.record.timeout.ms
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Importance:** Low

**Type:** Long

**Default Value:** 300000

**Validator:** [100,...]


The maximum amount of time to wait when writing to the deque before throwing a timeout exception.

--------
Examples
--------

^^^^^^^^^^^^^^^^^^^^^^
Property based example
^^^^^^^^^^^^^^^^^^^^^^


This configuration is used typically along with `standalone mode
<http://docs.confluent.io/current/connect/concepts.html#standalone-workers>`_.

.. code-block:: properties
    :name: connector.properties
    :emphasize-lines: 4,5,6,7,8

    name=MsSqlSourceConnector1
    connector.class=com.github.jcustenborder.kafka.connect.cdc.mssql.MsSqlSourceConnector
    tasks.max=1
    initial.database=< Required Configuration >
    password=< Required Configuration >
    server.name=< Required Configuration >
    server.port=< Required Configuration >
    username=< Required Configuration >




^^^^^^^^^^^^^^^^^^
Rest based example
^^^^^^^^^^^^^^^^^^


This configuration is used typically along with `distributed mode
<http://docs.confluent.io/current/connect/concepts.html#distributed-workers>`_.
Write the following json to `connector.json`, configure all of the required values, and use the command below to
post the configuration to one the distributed connect worker(s). Check here for more information about the
`Kafka Connect REST Interface. <https://docs.confluent.io/current/connect/restapi.html>`_

.. code-block:: json
    :name: connector.json
    :emphasize-lines: 6,7,8,9,10

    {
      "config" : {
        "name" : "MsSqlSourceConnector1",
        "connector.class" : "com.github.jcustenborder.kafka.connect.cdc.mssql.MsSqlSourceConnector",
        "tasks.max" : "1",
        "initial.database" : "< Required Configuration >",
        "password" : "< Required Configuration >",
        "server.name" : "< Required Configuration >",
        "server.port" : "< Required Configuration >",
        "username" : "< Required Configuration >"
      }
    }



Use curl to post the configuration to one of the Kafka Connect Workers. Change `http://localhost:8083/` the the endpoint of
one of your Kafka Connect worker(s).

.. code-block:: bash
    :caption: Create a new connector

    curl -s -X POST -H 'Content-Type: application/json' --data @connector.json http://localhost:8083/connectors


.. code-block:: bash
    :caption: Update an existing connector

    curl -s -X PUT -H 'Content-Type: application/json' --data @connector.json http://localhost:8083/connectors/MsSqlSourceConnector1/config


